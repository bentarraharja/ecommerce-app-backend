// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	cart "MyEcommerce/features/cart"

	mock "github.com/stretchr/testify/mock"
)

// CartData is an autogenerated mock type for the CartDataInterface type
type CartData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userIdLogin, cartId
func (_m *CartData) Delete(userIdLogin int, cartId int) error {
	ret := _m.Called(userIdLogin, cartId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userIdLogin, cartId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: userIdLogin, productId
func (_m *CartData) Insert(userIdLogin int, productId int) error {
	ret := _m.Called(userIdLogin, productId)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userIdLogin, productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: userIdLogin
func (_m *CartData) Select(userIdLogin int) ([]cart.Core, error) {
	ret := _m.Called(userIdLogin)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 []cart.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]cart.Core, error)); ok {
		return rf(userIdLogin)
	}
	if rf, ok := ret.Get(0).(func(int) []cart.Core); ok {
		r0 = rf(userIdLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cart.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userIdLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userIdLogin, cartId, input
func (_m *CartData) Update(userIdLogin int, cartId int, input cart.Core) error {
	ret := _m.Called(userIdLogin, cartId, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, cart.Core) error); ok {
		r0 = rf(userIdLogin, cartId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCartData creates a new instance of CartData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartData(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartData {
	mock := &CartData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
